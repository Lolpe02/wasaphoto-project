openapi: 3.0.1
info:
  title: "WasaPhoto"
  version: 1.0.0
  description: api for "WasaPhoto" project
#servers:
#  - url: ht/tp://lo/calhost:3/000
#    description: Local server
tags:
  - name: user 
    description: Operations related to users
  - name: post
    description: Operations related to posts
  - name: login
    description: Operations related to log-in
  - name: like
    description: Operations related to likes
  - name: comment
    description: Operations related to comments
  - name: followers
    description: Operations related to followers
  - name: muted
    description: Operations related to banned users
components:
  schemas:
    identifier:
      title: Id
      description: identifier of an object
      type: integer
      format: int64
      readOnly: true
      minimum: 0
      maximum: 9223372036854775807 
        #\nlike:
          #description: number of likes
          #type: integer
          #default: 0
          #minimum: 0
          #maximum: 9999999999999999999
          #readOnly: true
        #likes:
          #description: list of likes of the post
          #type: array
          #items: 
          #  $ref: "#/components/schemas/identifier"
          #minItems: 0
          #maxItems: 9999999999999999999
        #comments:
          #description: list of comments of the post
          #type: array
          #items: 
          #  $ref: "#/components/schemas/Comment"
          #minItems: 0
          #maxItems: 9999999
    Comment:
      title: Post comment
      description: post comment
      type: object
      properties:
        commentId:
          $ref: "#/components/schemas/identifier"
        creator:
          $ref: "#/components/schemas/User/properties/userName"
        content:
          description: user's input string
          type: string
          pattern: '^.{1,300}$'
          minLength: 1
          maxLength: 300
          example: "I wish I knew how to write an api"
        date:
          description: when this comment was sent
          type: string
          format: date-time
          minLength: 6
          maxLength: 20      
    User:
      title: User
      description: this object is a single user
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/identifier"
        userName:
          description: how the user will be recognized
          type: string
          minLength: 3
          maxLength: 25
          pattern: '^.{3,25}$' 
          example: "SkibidiSigma420"
          readOnly: false
        date:
          description: when the user was created
          type: string
          format: date-time
          minLength: 6
          maxLength: 20
          readOnly: true
        posted:
          description: list of user's post
          type: array
          items: 
            $ref: "#/components/schemas/identifier"
          minItems: 0
          maxItems: 10000
          readOnly: true
        following:
          description: list of user's followed users
          type: array
          items: 
            $ref: "#/components/schemas/User/properties/userId"
          minItems: 0
          maxItems: 10000
          readOnly: true
        followed:
          description: list of user's followers
          type: array
          items: 
            $ref: "#/components/schemas/User/properties/userId"
          minItems: 0
          maxItems: 10000
          readOnly: true
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use Bearer token for authentication (JWT)
  responses:
    NotFound:
      description: Content not found
      content:
        application/json:
          schema:
            description: returned error string
            type: string
            minLength: 0
            maxLength: 60
            pattern: ^[\S\s]{0,60}$ #(.*?)
            example: "Content not found"
    OkDone:
      description: Ok
      content:
        application/json:
          schema:
            description: returned error string
            type: string
            minLength: 0
            maxLength: 60
            pattern: ^[\S\s]{0,60}$ #(.*?)
            example: "Ok"
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            description: returned error string
            type: string
            minLength: 0
            maxLength: 60
            pattern: ^[\S\s]{0,60}$ #(.*?)
            example: "Unauthorized"
    ServerError:
      description: something went wrong, try later or never again
      content:
        application/json:
          schema:
            description: returned error string
            type: string
            minLength: 0
            maxLength: 60
            pattern: ^[\S\s]{0,60}$ #(.*?)
            example: "Server error"
security:
  - bearerAuth: []
             
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      security: []
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User/properties/userName"
        required: true
      responses:
        "200":
          description: user already logged in, returned their own id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identifier"
        '201':
          description: User log-in action successful, you'll receive your uid
          content:
              application/json:                 
                schema:
                  $ref: "#/components/schemas/identifier"
        "500":
          description: something went wrong in the server
  /Images/{postId}/likes/:
    parameters:
      - name: postId
        in: path
        schema: 
          $ref: "#/components/schemas/identifier"
        required: true
    get:
      summary: get likes of the post
      description: get a list of like objects of the post
      operationId: getLikesPhoto
      tags: ["like"]
      responses:
        "200":
          description: all likes of post
          content:
            application/json:
              schema:
                description: array of userlikes
                type: array
                items:
                  {$ref: "#/components/schemas/User/properties/userName"}
                minItems: 0
                maxItems: 10000
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Images/{postId}/likes/{yourId}:
    parameters:
      - name: yourId
        in: path
        schema: 
          $ref: "#/components/schemas/identifier"
        required: true
      - name: postId
        in: path
        schema: 
          $ref: "#/components/schemas/identifier"
        required: true
    put:
      summary: place a like on the post
      description: insert a like object in the like list of the post
      operationId: likePhoto
      tags: ["like", "post"]
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "201":
          $ref: "#/components/responses/OkDone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      summary: delete your like on the post
      description: remove a like object in the like list of the post
      operationId: unlikePhoto
      tags: ["like", "post"]
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Images/{postId}/comments/:
    parameters:
      - name: postId
        in: path
        schema: 
          $ref: "#/components/schemas/identifier"
        required: true
      - name: commenter
        in: query
        schema: 
          $ref: "#/components/schemas/User/properties/userName"
        required: false
    get:
      summary: get commets of the post
      description: get a list of comment objects of the post
      operationId: getCommentsPhoto
      tags: ["comment"]
      responses:
        "200":
          description: comment list
          content:
            application/json:
              schema:
                description: array of all comments
                type: array
                items:
                  {$ref: "#/components/schemas/Comment"}
                minItems: 0
                maxItems: 500000
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      summary: place a comment on the post
      description: insert a comment object in the comment list of the post
      operationId: commentPhoto
      tags: ["comment", "post"]
      requestBody:
        description: comment
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Comment/properties/content"
      responses:
        "201":
          description: comment placed, returned comment id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identifier"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Images/{postId}/comments/{commentId}:
    parameters:
        - name: commentId
          in: path
          schema:
            $ref: "#/components/schemas/identifier"
          required: true
        - name: postId
          in: path
          schema: 
            $ref: "#/components/schemas/identifier"
          required: true
    delete:
      summary: delete your comment on the post
      description: remove a comment object in the comment list of the post
      operationId: uncommentPhoto
      tags: ["comment", "post"]
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "400":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Users/:
    patch:
      summary: change your userName
      description: change your userName, it must be valid
      operationId: setMyUserName
      tags: ["userName"]
      
      requestBody:
        description: String payload for updating the resource
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User/properties/userName"
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    get:
      summary: get a list of users matching the query
      description: receive a list of users with names matching the query name
      operationId: getUserNames
      tags: ["user"]
      parameters:
      - name: userName
        in: query
        required: true
        description: The userName of the users to find 
        schema:
          $ref: "#/components/schemas/User/properties/userName"
      responses:
        "200":
          description: list of matching names
          content:
            application/json:
              schema:
                description: 'dictionary of tuples {userName:userId}'
                type: object
                example: {"SkibidiSigma420":1,"Mogger":2}
                minItems: 0
                maxItems: 10000
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"    
  /Users/profile:
    get:
      summary: get a user profile
      description: | 
        receive a user profile, made of:
        - userName
        - posts
        - followed and following lists
      operationId: getUserProfile
      tags: ["profile"]
      parameters:
      - name: userName
        in: query
        required: true
        description: The userName of the user to update or find 
        schema:
          $ref: "#/components/schemas/User/properties/userName"
      responses:
        "200":
          description: Successful retrieval
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"       
  /Users/me/myStream:
    get:
      summary: watch your friends' photos
      description: |
        receive a stream of posts, picked only from people
        you follow in anti-chronological order
      operationId: getMyStream
      tags: ["feed"]
      responses:
        "200":
          description: feed successfully sent
          content:
            application/json:
              schema:
                description: array of postIds to fetch after
                type: array
                items:
                  {$ref: "#/components/schemas/identifier"}
                minItems: 0
                maxItems: 50
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"  
  /Images/:
    post:
      summary: create a new post
      description: |
        add an image to your profile, to be displayed
        in anti-chronological order
      operationId: uploadPhoto
      tags: ["post"]
      requestBody:
        required: true
        description: upload your photo file
        content:
          multipart/form-data:
            schema:
              description: upload your photo file (max 32MB image, max 300 chars description)
              type: object
              properties: # Request parts
                photo:
                  description: image file in binary string to upload (max 32MB, png, jpeg, gif)
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 32000000
                description:
                  description: user's caption for the post
                  type: string
                  minLength: 0
                  maxLength: 300
                  pattern: '^.{0,300}$'
                  example: "Like a boss"
              required:
                - photo
                - description
            encoding: # The same level as schema
              photo: # Property name (see above)
                contentType: image/png, image/jpeg, image/gif
      responses:
        "201":
          description: post created, returned post id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identifier"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
  /Images/{postId}:
    parameters:
        - in: path
          name: postId
          required: true
          description: Id of photo you want to get/delete
          schema:
            $ref: "#/components/schemas/identifier"
    delete:
      summary: delete one of your posts
      description: |
        delete a post from your profile, 
        given its id
      operationId: deletePhoto
      tags: ["post"]
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    get:
      summary: get a post
      description: aquire a post given its id
      operationId: getPhoto
      tags: ["post"]
      responses:
        "200":
          description: requested post image
          content:
            image/*:
              schema:
                description: image file
                type: string
                format: binary
                minLength: 1
                maxLength: 32000000
              encoding:
                photo:
                  contentType: image/png, image/jpeg, image/gif
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Images/{postId}/metadata/:
    parameters:
        - in: path
          name: postId
          required: true
          description: Id of photo metadata you want to get
          schema:
            $ref: "#/components/schemas/identifier"
    get:
      summary: get a post metadata (creator, description, date)
      description: aquire a post metadata given its id
      operationId: getPhotoMetadata
      tags: ["post"]
      responses:
        "200":
          description: requested post info
          content:
            application/json:
              schema:
                description: post metadata object (creatorId, name, description, date)
                type: object
                properties:
                  creatorId:
                    $ref: "#/components/schemas/identifier"
                  creatorName:
                    $ref: "#/components/schemas/User/properties/userName"
                  description:
                    description: user's caption for the post
                    type: string
                    minLength: 0
                    maxLength: 300
                    pattern: '^.{0,300}$'
                    example: "Like a boss"
                  date:
                    description: when the post was uploaded
                    type: string
                    format: date-time
                    minLength: 6
                    maxLength: 20 
                  
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Users/me/following/:
    post:
      summary: follow a user 
      description: |
        insert a user in your list of people you follow,
        you will see Their posts 
      operationId: followUser
      tags: ["followers", "user"]
      requestBody:
        description: the person you want to follow
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/User/properties/userId"
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "201":
          $ref: "#/components/responses/OkDone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    get:
      summary: get people a user follows 
      description: receive a list of users that are followe by the user in the query
      operationId: getFollowing
      tags: ["followers"]
      parameters:
      - name: userName
        in: query
        required: true
        description: The userName of the user to fetch following of
        schema:
          $ref: "#/components/schemas/User/properties/userName"
      responses:
        "200":
          description: list of following names
          content:
            application/json:
              schema:
                description: array of followeds
                type: array
                items:
                  {$ref: "#/components/schemas/User/properties/userName"}
                minItems: 0
                maxItems: 10000
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Users/me/following/{followId}:
    parameters:
      - name: followId
        in: path
        required: true
        description: uid to unfollow
        schema:
          $ref: "#/components/schemas/identifier"
    delete:
      summary: unfollow a user 
      description: |
        delete a user in your follow list,
        you won't see their posts again
      operationId: unfollowUser
      tags: ["followers", "user"]
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Users/me/followers/:
    get:
      summary: get a person's followers
      description: receive a list of users that follow the user in the query
      operationId: getFollowers
      tags: ["followers"]
      parameters:
      - name: userName
        in: query
        required: true
        description: The userName of the user to fetch followers of
        schema:
          $ref: "#/components/schemas/User/properties/userName"
      responses:
        "200":
          description: list of followers names
          content:
            application/json:
              schema:
                description: array of followers
                type: array
                items:
                  {$ref: "#/components/schemas/User/properties/userName"}
                minItems: 0
                maxItems: 10000
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Users/me/muted/:
    post:
      summary: ban a user 
      description: |
        insert a user in your list of banned people,
        they won't see your posts 
      operationId: banUser
      tags: ["muted", "user"]
      requestBody:
        description: the person you want to ban
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User/properties/userId"
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "201":
          $ref: "#/components/responses/OkDone"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Users/me/muted/{bannedId}:
    parameters:
      - name: bannedId
        in: path
        description: Id of the user you want to unban
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    delete:
      summary: unban a banned user 
      description: |
        delete a user in your banlist,
        they will see your posts again
      operationId: unbanUser
      tags: ["muted", "user"]
      responses:
        "200":
          $ref: "#/components/responses/OkDone"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Database/:
    put:
      summary: extract from the whole database
      description: |
        execute query that returns result rows/table
        (like SELECT, returning),only for debug purposes
      operationId: queryDatabase
      tags: ["debug"]
      requestBody:
        description: query
        required: true
        content:
          application/json:
            schema:
              description: query to execute
              type: string
              minLength: 1
              maxLength: 1000
              pattern: ^[\S\s]{1,1000}$
              example: "SELECT * FROM users"
      responses:
        "200":
          description: query result
          content:
            application/json:
              schema:
                description: res object
                type: object
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      summary: exec into the whole database
      description: |
        execute query that doesnt return rows 
        (like INSERT, UPDATE, DELETE), only for debug purposes
      operationId: execDatabase
      tags: ["debug"]
      requestBody:
        description: query
        required: true
        content:
          application/json:
            schema:
              type: string
              description: query to execute
              minLength: 1
              maxLength: 1000
              pattern: ^[\S\s]{1,1000}$
              example: "SELECT * FROM users"
      responses:
        "200":
          description: number of changed rows
          content:
            application/json:
              schema:
                description: affected lines / changes
                type: integer
                minimum: 0
                maximum: 9999999999999999999
        "201":
          description: number of changed rows
          content:
            application/json:
              schema:
                description: affected lines / changes
                type: integer
                minimum: 0
                maximum: 9999999999999999999
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
